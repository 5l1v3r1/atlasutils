DISASSEMBLY: 
 test:     file format elf32-i386
 
 Disassembly of section .init:
 
 080482e8 <_init>:
  80482e8:	55                   	push   %ebp
  80482e9:	89 e5                	mov    %esp,%ebp
  80482eb:	83 ec 08             	sub    $0x8,%esp
  80482ee:	e8 71 00 00 00       	call   8048364 <call_gmon_start>
  80482f3:	e8 d8 00 00 00       	call   80483d0 <frame_dummy>
  80482f8:	e8 13 02 00 00       	call   8048510 <__do_global_ctors_aux>
  80482fd:	89 ec                	mov    %ebp,%esp
  80482ff:	5d                   	pop    %ebp
  8048300:	c3                   	ret    
 Disassembly of section .plt:
 
 08048304 <.plt>:
  8048304:	ff 35 88 96 04 08    	pushl  0x8049688
  804830a:	ff 25 8c 96 04 08    	jmp    *0x804968c
  8048310:	00 00                	add    %al,(%eax)
  8048312:	00 00                	add    %al,(%eax)
  8048314:	ff 25 90 96 04 08    	jmp    *0x8049690	fprintf
  804831a:	68 00 00 00 00       	push   $0x0
  804831f:	e9 e0 ff ff ff       	jmp    8048304 <_init+0x1c>
  8048324:	ff 25 94 96 04 08    	jmp    *0x8049694	__libc_start_main
  804832a:	68 08 00 00 00       	push   $0x8
  804832f:	e9 d0 ff ff ff       	jmp    8048304 <_init+0x1c>
 Disassembly of section .text:
 
 08048340 <_start>:
  8048340:	31 ed                	xor    %ebp,%ebp
  8048342:	5e                   	pop    %esi
  8048343:	89 e1                	mov    %esp,%ecx
  8048345:	83 e4 f0             	and    $0xfffffff0,%esp
  8048348:	50                   	push   %eax
  8048349:	54                   	push   %esp
  804834a:	52                   	push   %edx
  804834b:	68 b8 84 04 08       	push   $0x80484b8
  8048350:	68 70 84 04 08       	push   $0x8048470
  8048355:	51                   	push   %ecx
  8048356:	56                   	push   %esi
  8048357:	68 04 84 04 08       	push   $0x8048404
  804835c:	e8 c3 ff ff ff       	call   8048324 <_init+0x3c>	 __libc_start_main (brkpt: 4)

  8048361:	f4                   	hlt    
  8048362:	90                   	nop    
  8048363:	90                   	nop    
 
 08048364 <call_gmon_start>:
  8048364:	55                   	push   %ebp
  8048365:	89 e5                	mov    %esp,%ebp
  8048367:	83 ec 08             	sub    $0x8,%esp
  804836a:	89 5d fc             	mov    %ebx,0xfffffffc(%ebp)
  804836d:	e8 19 00 00 00       	call   804838b <__i686.get_pc_thunk.bx>
  8048372:	81 c3 12 13 00 00    	add    $0x1312,%ebx
  8048378:	8b 83 14 00 00 00    	mov    0x14(%ebx),%eax
  804837e:	85 c0                	test   %eax,%eax
  8048380:	74 02                	je     8048384 <call_gmon_start+0x20>
  8048382:	ff d0                	call   *%eax
  8048384:	8b 5d fc             	mov    0xfffffffc(%ebp),%ebx
  8048387:	89 ec                	mov    %ebp,%esp
  8048389:	5d                   	pop    %ebp
  804838a:	c3                   	ret    
 
 0804838b <__i686.get_pc_thunk.bx>:
  804838b:	8b 1c 24             	mov    (%esp),%ebx
  804838e:	c3                   	ret    
  804838f:	90                   	nop    
 
 08048390 <__do_global_dtors_aux>:
  8048390:	55                   	push   %ebp
  8048391:	89 e5                	mov    %esp,%ebp
  8048393:	83 ec 08             	sub    $0x8,%esp
  8048396:	80 3d a8 96 04 08 00 	cmpb   $0x0,0x80496a8
  804839d:	75 2d                	jne    80483cc <__do_global_dtors_aux+0x3c>
  804839f:	a1 a0 95 04 08       	mov    0x80495a0,%eax
  80483a4:	8b 10                	mov    (%eax),%edx
  80483a6:	85 d2                	test   %edx,%edx
  80483a8:	74 1b                	je     80483c5 <__do_global_dtors_aux+0x35>
  80483aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  80483b0:	83 c0 04             	add    $0x4,%eax
  80483b3:	a3 a0 95 04 08       	mov    %eax,0x80495a0
  80483b8:	ff d2                	call   *%edx
  80483ba:	a1 a0 95 04 08       	mov    0x80495a0,%eax
  80483bf:	8b 10                	mov    (%eax),%edx
  80483c1:	85 d2                	test   %edx,%edx
  80483c3:	75 eb                	jne    80483b0 <__do_global_dtors_aux+0x20>
  80483c5:	c6 05 a8 96 04 08 01 	movb   $0x1,0x80496a8
  80483cc:	c9                   	leave  
  80483cd:	c3                   	ret    
  80483ce:	89 f6                	mov    %esi,%esi
 
 080483d0 <frame_dummy>:
  80483d0:	55                   	push   %ebp
  80483d1:	89 e5                	mov    %esp,%ebp
  80483d3:	83 ec 08             	sub    $0x8,%esp
  80483d6:	a1 80 96 04 08       	mov    0x8049680,%eax
  80483db:	85 c0                	test   %eax,%eax
  80483dd:	74 21                	je     8048400 <frame_dummy+0x30>
  80483df:	b8 00 00 00 00       	mov    $0x0,%eax
  80483e4:	85 c0                	test   %eax,%eax
  80483e6:	74 18                	je     8048400 <frame_dummy+0x30>
  80483e8:	c7 04 24 80 96 04 08 	movl   $0x8049680,(%esp)
  80483ef:	e8 0c 7c fb f7       	call   0 <_init-0x80482e8>
  80483f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  80483fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
  8048400:	89 ec                	mov    %ebp,%esp
  8048402:	5d                   	pop    %ebp
  8048403:	c3                   	ret    
 
 08048404 <main>:
  8048404:	55                   	push   %ebp
  8048405:	89 e5                	mov    %esp,%ebp
  8048407:	83 ec 18             	sub    $0x18,%esp
  804840a:	83 e4 f0             	and    $0xfffffff0,%esp
  804840d:	b8 00 00 00 00       	mov    $0x0,%eax
  8048412:	29 c4                	sub    %eax,%esp
  8048414:	a1 a4 96 04 08       	mov    0x80496a4,%eax	stdin
  8048419:	89 44 24 08          	mov    %eax,0x8(%esp)
  804841d:	c7 44 24 04 68 85 04 	movl   $0x8048568,0x4(%esp)
  8048424:	08 
  8048425:	a1 9c 96 04 08       	mov    0x804969c,%eax	stdout
  804842a:	89 04 24             	mov    %eax,(%esp)
  804842d:	e8 e2 fe ff ff       	call   8048314 <_init+0x2c>	 fprintf (brkpt: 1)

  8048432:	a1 9c 96 04 08       	mov    0x804969c,%eax	stdout
  8048437:	89 44 24 08          	mov    %eax,0x8(%esp)
  804843b:	c7 44 24 04 77 85 04 	movl   $0x8048577,0x4(%esp)
  8048442:	08 
  8048443:	a1 9c 96 04 08       	mov    0x804969c,%eax	stdout
  8048448:	89 04 24             	mov    %eax,(%esp)
  804844b:	e8 c4 fe ff ff       	call   8048314 <_init+0x2c>	 fprintf (brkpt: 2)

  8048450:	a1 a0 96 04 08       	mov    0x80496a0,%eax	stderr
  8048455:	89 44 24 08          	mov    %eax,0x8(%esp)
  8048459:	c7 44 24 04 86 85 04 	movl   $0x8048586,0x4(%esp)
  8048460:	08 
  8048461:	a1 9c 96 04 08       	mov    0x804969c,%eax	stdout
  8048466:	89 04 24             	mov    %eax,(%esp)
  8048469:	e8 a6 fe ff ff       	call   8048314 <_init+0x2c>	 fprintf (brkpt: 3)

  804846e:	c9                   	leave  
  804846f:	c3                   	ret    
 
 08048470 <__libc_csu_init>:
  8048470:	55                   	push   %ebp
  8048471:	89 e5                	mov    %esp,%ebp
  8048473:	57                   	push   %edi
  8048474:	56                   	push   %esi
  8048475:	31 f6                	xor    %esi,%esi
  8048477:	53                   	push   %ebx
  8048478:	e8 0e ff ff ff       	call   804838b <__i686.get_pc_thunk.bx>
  804847d:	81 c3 07 12 00 00    	add    $0x1207,%ebx
  8048483:	83 ec 0c             	sub    $0xc,%esp
  8048486:	e8 5d fe ff ff       	call   80482e8 <_init>
  804848b:	8d 83 14 ff ff ff    	lea    0xffffff14(%ebx),%eax
  8048491:	8d 93 14 ff ff ff    	lea    0xffffff14(%ebx),%edx
  8048497:	29 c2                	sub    %eax,%edx
  8048499:	c1 fa 02             	sar    $0x2,%edx
  804849c:	39 d6                	cmp    %edx,%esi
  804849e:	73 10                	jae    80484b0 <__libc_csu_init+0x40>
  80484a0:	89 d7                	mov    %edx,%edi
  80484a2:	ff 94 b3 14 ff ff ff 	call   *0xffffff14(%ebx,%esi,4)
  80484a9:	83 c6 01             	add    $0x1,%esi
  80484ac:	39 fe                	cmp    %edi,%esi
  80484ae:	72 f2                	jb     80484a2 <__libc_csu_init+0x32>
  80484b0:	83 c4 0c             	add    $0xc,%esp
  80484b3:	5b                   	pop    %ebx
  80484b4:	5e                   	pop    %esi
  80484b5:	5f                   	pop    %edi
  80484b6:	5d                   	pop    %ebp
  80484b7:	c3                   	ret    
 
 080484b8 <__libc_csu_fini>:
  80484b8:	55                   	push   %ebp
  80484b9:	89 e5                	mov    %esp,%ebp
  80484bb:	83 ec 08             	sub    $0x8,%esp
  80484be:	89 1c 24             	mov    %ebx,(%esp)
  80484c1:	89 74 24 04          	mov    %esi,0x4(%esp)
  80484c5:	e8 c1 fe ff ff       	call   804838b <__i686.get_pc_thunk.bx>
  80484ca:	81 c3 ba 11 00 00    	add    $0x11ba,%ebx
  80484d0:	8d 83 14 ff ff ff    	lea    0xffffff14(%ebx),%eax
  80484d6:	8d 93 14 ff ff ff    	lea    0xffffff14(%ebx),%edx
  80484dc:	29 d0                	sub    %edx,%eax
  80484de:	c1 f8 02             	sar    $0x2,%eax
  80484e1:	85 c0                	test   %eax,%eax
  80484e3:	8d 70 ff             	lea    0xffffffff(%eax),%esi
  80484e6:	75 10                	jne    80484f8 <__libc_csu_fini+0x40>
  80484e8:	e8 53 00 00 00       	call   8048540 <_fini>
  80484ed:	8b 74 24 04          	mov    0x4(%esp),%esi
  80484f1:	8b 1c 24             	mov    (%esp),%ebx
  80484f4:	89 ec                	mov    %ebp,%esp
  80484f6:	5d                   	pop    %ebp
  80484f7:	c3                   	ret    
  80484f8:	ff 94 b3 14 ff ff ff 	call   *0xffffff14(%ebx,%esi,4)
  80484ff:	89 f0                	mov    %esi,%eax
  8048501:	83 ee 01             	sub    $0x1,%esi
  8048504:	85 c0                	test   %eax,%eax
  8048506:	75 f0                	jne    80484f8 <__libc_csu_fini+0x40>
  8048508:	eb de                	jmp    80484e8 <__libc_csu_fini+0x30>
  804850a:	90                   	nop    
  804850b:	90                   	nop    
  804850c:	90                   	nop    
  804850d:	90                   	nop    
  804850e:	90                   	nop    
  804850f:	90                   	nop    
 
 08048510 <__do_global_ctors_aux>:
  8048510:	55                   	push   %ebp
  8048511:	89 e5                	mov    %esp,%ebp
  8048513:	53                   	push   %ebx
  8048514:	83 ec 04             	sub    $0x4,%esp
  8048517:	bb 70 96 04 08       	mov    $0x8049670,%ebx
  804851c:	a1 70 96 04 08       	mov    0x8049670,%eax
  8048521:	83 f8 ff             	cmp    $0xffffffff,%eax
  8048524:	74 16                	je     804853c <__do_global_ctors_aux+0x2c>
  8048526:	8d 76 00             	lea    0x0(%esi),%esi
  8048529:	8d bc 27 00 00 00 00 	lea    0x0(%edi),%edi
  8048530:	83 eb 04             	sub    $0x4,%ebx
  8048533:	ff d0                	call   *%eax
  8048535:	8b 03                	mov    (%ebx),%eax
  8048537:	83 f8 ff             	cmp    $0xffffffff,%eax
  804853a:	75 f4                	jne    8048530 <__do_global_ctors_aux+0x20>
  804853c:	58                   	pop    %eax
  804853d:	5b                   	pop    %ebx
  804853e:	5d                   	pop    %ebp
  804853f:	c3                   	ret    
 Disassembly of section .fini:
 
 08048540 <_fini>:
  8048540:	55                   	push   %ebp
  8048541:	89 e5                	mov    %esp,%ebp
  8048543:	83 ec 08             	sub    $0x8,%esp
  8048546:	89 5d fc             	mov    %ebx,0xfffffffc(%ebp)
  8048549:	e8 3d fe ff ff       	call   804838b <__i686.get_pc_thunk.bx>
  804854e:	81 c3 36 11 00 00    	add    $0x1136,%ebx
  8048554:	e8 37 fe ff ff       	call   8048390 <__do_global_dtors_aux>
  8048559:	8b 5d fc             	mov    0xfffffffc(%ebp),%ebx
  804855c:	89 ec                	mov    %ebp,%esp
  804855e:	5d                   	pop    %ebp
  804855f:	c3                   	ret    


GOT: 
OFFSET   TYPE              VALUE 
 08049698 R_386_GLOB_DAT    __gmon_start__
 0804969c R_386_COPY        stdout
 080496a0 R_386_COPY        stderr
 080496a4 R_386_COPY        stdin
 08049690 R_386_JUMP_SLOT   fprintf
 08049694 R_386_JUMP_SLOT   __libc_start_main
 
 


HEADERS: 

 test:     file format elf32-i386
 
 Sections:
 Idx Name          Size      VMA       LMA       File off  Algn
   0 .interp       00000013  08048114  08048114  00000114  2**0
                   CONTENTS, ALLOC, LOAD, READONLY, DATA
   1 .note.ABI-tag 00000020  08048128  08048128  00000128  2**2
                   CONTENTS, ALLOC, LOAD, READONLY, DATA
   2 .hash         00000038  08048148  08048148  00000148  2**2
                   CONTENTS, ALLOC, LOAD, READONLY, DATA
   3 .dynsym       00000090  08048180  08048180  00000180  2**2
                   CONTENTS, ALLOC, LOAD, READONLY, DATA
   4 .dynstr       00000075  08048210  08048210  00000210  2**0
                   CONTENTS, ALLOC, LOAD, READONLY, DATA
   5 .gnu.version  00000012  08048286  08048286  00000286  2**1
                   CONTENTS, ALLOC, LOAD, READONLY, DATA
   6 .gnu.version_r 00000020  08048298  08048298  00000298  2**2
                   CONTENTS, ALLOC, LOAD, READONLY, DATA
   7 .rel.dyn      00000020  080482b8  080482b8  000002b8  2**2
                   CONTENTS, ALLOC, LOAD, READONLY, DATA
   8 .rel.plt      00000010  080482d8  080482d8  000002d8  2**2
                   CONTENTS, ALLOC, LOAD, READONLY, DATA
   9 .init         00000019  080482e8  080482e8  000002e8  2**0
                   CONTENTS, ALLOC, LOAD, READONLY, CODE
  10 .plt          00000030  08048304  08048304  00000304  2**2
                   CONTENTS, ALLOC, LOAD, READONLY, CODE
  11 .text         00000200  08048340  08048340  00000340  2**4
                   CONTENTS, ALLOC, LOAD, READONLY, CODE
  12 .fini         00000020  08048540  08048540  00000540  2**0
                   CONTENTS, ALLOC, LOAD, READONLY, CODE
  13 .rodata       00000037  08048560  08048560  00000560  2**2
                   CONTENTS, ALLOC, LOAD, READONLY, DATA
  14 .data         0000000c  08049598  08049598  00000598  2**2
                   CONTENTS, ALLOC, LOAD, DATA
  15 .eh_frame     00000004  080495a4  080495a4  000005a4  2**2
                   CONTENTS, ALLOC, LOAD, READONLY, DATA
  16 .dynamic      000000c8  080495a8  080495a8  000005a8  2**2
                   CONTENTS, ALLOC, LOAD, DATA
  17 .ctors        00000008  08049670  08049670  00000670  2**2
                   CONTENTS, ALLOC, LOAD, DATA
  18 .dtors        00000008  08049678  08049678  00000678  2**2
                   CONTENTS, ALLOC, LOAD, DATA
  19 .jcr          00000004  08049680  08049680  00000680  2**2
                   CONTENTS, ALLOC, LOAD, DATA
  20 .got          00000018  08049684  08049684  00000684  2**2
                   CONTENTS, ALLOC, LOAD, DATA
  21 .bss          00000010  0804969c  0804969c  0000069c  2**2
                   ALLOC
  22 .comment      00000134  00000000  00000000  0000069c  2**0
                   CONTENTS, READONLY
  23 .debug_aranges 00000088  00000000  00000000  000007d0  2**3
                   CONTENTS, READONLY, DEBUGGING
  24 .debug_pubnames 00000025  00000000  00000000  00000858  2**0
                   CONTENTS, READONLY, DEBUGGING
  25 .debug_info   00000a41  00000000  00000000  0000087d  2**0
                   CONTENTS, READONLY, DEBUGGING
  26 .debug_abbrev 00000138  00000000  00000000  000012be  2**0
                   CONTENTS, READONLY, DEBUGGING
  27 .debug_line   00000271  00000000  00000000  000013f6  2**0
                   CONTENTS, READONLY, DEBUGGING
  28 .debug_str    000006b2  00000000  00000000  00001667  2**0
                   CONTENTS, READONLY, DEBUGGING


SYMBOLS: 

 test:     file format elf32-i386
 
 SYMBOL TABLE:
 08048114 l    d  .interp	00000000              
 08048128 l    d  .note.ABI-tag	00000000              
 08048148 l    d  .hash	00000000              
 08048180 l    d  .dynsym	00000000              
 08048210 l    d  .dynstr	00000000              
 08048286 l    d  .gnu.version	00000000              
 08048298 l    d  .gnu.version_r	00000000              
 080482b8 l    d  .rel.dyn	00000000              
 080482d8 l    d  .rel.plt	00000000              
 080482e8 l    d  .init	00000000              
 08048304 l    d  .plt	00000000              
 08048340 l    d  .text	00000000              
 08048540 l    d  .fini	00000000              
 08048560 l    d  .rodata	00000000              
 08049598 l    d  .data	00000000              
 080495a4 l    d  .eh_frame	00000000              
 080495a8 l    d  .dynamic	00000000              
 08049670 l    d  .ctors	00000000              
 08049678 l    d  .dtors	00000000              
 08049680 l    d  .jcr	00000000              
 08049684 l    d  .got	00000000              
 0804969c l    d  .bss	00000000              
 00000000 l    d  .comment	00000000              
 00000000 l    d  .debug_aranges	00000000              
 00000000 l    d  .debug_pubnames	00000000              
 00000000 l    d  .debug_info	00000000              
 00000000 l    d  .debug_abbrev	00000000              
 00000000 l    d  .debug_line	00000000              
 00000000 l    d  .debug_str	00000000              
 00000000 l    d  *ABS*	00000000              
 00000000 l    d  *ABS*	00000000              
 00000000 l    d  *ABS*	00000000              
 00000000 l    df *ABS*	00000000              <command line>
 00000000 l    df *ABS*	00000000              /build/buildd/glibc-2.3.2.ds1/build-tree/i386-libc/config.h
 00000000 l    df *ABS*	00000000              <command line>
 00000000 l    df *ABS*	00000000              <built-in>
 00000000 l    df *ABS*	00000000              abi-note.S
 00000000 l    df *ABS*	00000000              /build/buildd/glibc-2.3.2.ds1/build-tree/i386-libc/csu/abi-tag.h
 00000000 l    df *ABS*	00000000              abi-note.S
 00000000 l    df *ABS*	00000000              /build/buildd/glibc-2.3.2.ds1/build-tree/i386-libc/config.h
 00000000 l    df *ABS*	00000000              abi-note.S
 00000000 l    df *ABS*	00000000              <command line>
 00000000 l    df *ABS*	00000000              /build/buildd/glibc-2.3.2.ds1/build-tree/i386-libc/config.h
 00000000 l    df *ABS*	00000000              <command line>
 00000000 l    df *ABS*	00000000              <built-in>
 00000000 l    df *ABS*	00000000              abi-note.S
 00000000 l    df *ABS*	00000000              init.c
 00000000 l    df *ABS*	00000000              /build/buildd/glibc-2.3.2.ds1/build-tree/i386-libc/csu/crti.S
 00000000 l    df *ABS*	00000000              /build/buildd/glibc-2.3.2.ds1/build-tree/i386-libc/csu/defs.h
 00000000 l    df *ABS*	00000000              initfini.c
 00000000 l    df *ABS*	00000000              /build/buildd/glibc-2.3.2.ds1/build-tree/i386-libc/csu/crti.S
 00000000 l    df *ABS*	00000000              <command line>
 00000000 l    df *ABS*	00000000              /build/buildd/glibc-2.3.2.ds1/build-tree/i386-libc/config.h
 00000000 l    df *ABS*	00000000              <command line>
 00000000 l    df *ABS*	00000000              <built-in>
 00000000 l    df *ABS*	00000000              /build/buildd/glibc-2.3.2.ds1/build-tree/i386-libc/csu/crti.S
 08048364 l     F .text	00000000              call_gmon_start
 00000000 l    df *ABS*	00000000              crtstuff.c
 08049670 l     O .ctors	00000000              __CTOR_LIST__
 08049678 l     O .dtors	00000000              __DTOR_LIST__
 08049680 l     O .jcr	00000000              __JCR_LIST__
 080495a0 l     O .data	00000000              p.0
 080496a8 l     O .bss	00000001              completed.1
 08048390 l     F .text	00000000              __do_global_dtors_aux
 080483d0 l     F .text	00000000              frame_dummy
 00000000 l    df *ABS*	00000000              crtstuff.c
 08049674 l     O .ctors	00000000              __CTOR_END__
 0804967c l     O .dtors	00000000              __DTOR_END__
 080495a4 l     O .eh_frame	00000000              __FRAME_END__
 08049680 l     O .jcr	00000000              __JCR_END__
 08048510 l     F .text	00000000              __do_global_ctors_aux
 00000000 l    df *ABS*	00000000              /build/buildd/glibc-2.3.2.ds1/build-tree/i386-libc/csu/crtn.S
 00000000 l    df *ABS*	00000000              /build/buildd/glibc-2.3.2.ds1/build-tree/i386-libc/csu/defs.h
 00000000 l    df *ABS*	00000000              initfini.c
 00000000 l    df *ABS*	00000000              /build/buildd/glibc-2.3.2.ds1/build-tree/i386-libc/csu/crtn.S
 00000000 l    df *ABS*	00000000              <command line>
 00000000 l    df *ABS*	00000000              /build/buildd/glibc-2.3.2.ds1/build-tree/i386-libc/config.h
 00000000 l    df *ABS*	00000000              <command line>
 00000000 l    df *ABS*	00000000              <built-in>
 00000000 l    df *ABS*	00000000              /build/buildd/glibc-2.3.2.ds1/build-tree/i386-libc/csu/crtn.S
 00000000 l    df *ABS*	00000000              test.c
 080495a8 g     O .dynamic	00000000              _DYNAMIC
 08048560 g     O .rodata	00000004              _fp_hw
 00000000       F *UND*	00000023              fprintf@@GLIBC_2.0
 08049598 g       *ABS*	00000000              __fini_array_end
 0804959c g     O .data	00000000              .hidden __dso_handle
 080484b8 g     F .text	00000052              __libc_csu_fini
 080482e8 g     F .init	00000000              _init
 0804969c g     O .bss	00000004              stdout@@GLIBC_2.0
 080496a0 g     O .bss	00000004              stderr@@GLIBC_2.0
 08048340 g     F .text	00000000              _start
 08049598 g       *ABS*	00000000              __fini_array_start
 08048470 g     F .text	00000048              __libc_csu_init
 0804969c g       *ABS*	00000000              __bss_start
 08048404 g     F .text	0000006c              main
 00000000       F *UND*	000000fa              __libc_start_main@@GLIBC_2.0
 08049598 g       *ABS*	00000000              __init_array_end
 08049598  w      .data	00000000              data_start
 08048540 g     F .fini	00000000              _fini
 0804969c g       *ABS*	00000000              _edata
 0804838b g     F .text	00000000              .hidden __i686.get_pc_thunk.bx
 08049684 g     O .got	00000000              _GLOBAL_OFFSET_TABLE_
 080496ac g       *ABS*	00000000              _end
 080496a4 g     O .bss	00000004              stdin@@GLIBC_2.0
 08049598 g       *ABS*	00000000              __init_array_start
 08048564 g     O .rodata	00000004              _IO_stdin_used
 08049598 g       .data	00000000              __data_start
 00000000  w      *UND*	00000000              _Jv_RegisterClasses
 00000000  w      *UND*	00000000              __gmon_start__
 
 


Breakpoints for each "call":
 break *0x804842d
 break *0x804844b
 break *0x8048469
 break *0x804835c

DISPLAY SETTINGS/Basic
 display/i $pc
 display/x $edx
 display/x $ecx
 display/x $ebx
 display/x $eax
 display/32wx $ebp-88
 display/32xw $esp
